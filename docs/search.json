[
  {
    "objectID": "hw3_quarto.html",
    "href": "hw3_quarto.html",
    "title": "Control Flows",
    "section": "",
    "text": "load(\"files/hw2_list.rda\")"
  },
  {
    "objectID": "hw3_quarto.html#loading-files",
    "href": "hw3_quarto.html#loading-files",
    "title": "Control Flows",
    "section": "",
    "text": "load(\"files/hw2_list.rda\")"
  },
  {
    "objectID": "hw3_quarto.html#task-1-control-flow-practice",
    "href": "hw3_quarto.html#task-1-control-flow-practice",
    "title": "Control Flows",
    "section": "Task 1: Control Flow Practice",
    "text": "Task 1: Control Flow Practice\nWe are creating a status column in the data frames within the list\n\nbp_list$treatment$status &lt;- character(20)\nbp_list$placebo$status &lt;- character(10)\n\nFor the our dataframes (within the list), we are creating a for loop that follows the sequential logic of optimal (≤ 120), borderline (120 &lt; bp ≤ 130), and high (&gt; 130) to assign to the “status” column based on “post_bp”\nWe can accomplish this by fetching the post_bp value for that record and updating the status value using a nested if/else statement.\n\nfor (i in 1:nrow(bp_list$placebo)){\n  record_post_bp &lt;- bp_list$placebo$post_bp[i]\n  if (record_post_bp &lt;= 130){\n    if (record_post_bp &lt;= 120) {\n      record_status &lt;- \"optimal\"\n    } else {\n      record_status &lt;- \"borderline\"\n    }\n  } else {\n    record_status &lt;- \"high\"\n  } \n  bp_list$placebo$status[i] &lt;- record_status\n}\n\nfor (i in 1:nrow(bp_list$treatment)){\n  record_post_bp &lt;- bp_list$treatment$post_bp[i]\n  if (record_post_bp &lt;= 130){\n    if (record_post_bp &lt;= 120) {\n      record_status &lt;- \"optimal\"\n    } else {\n      record_status &lt;- \"borderline\"\n    }\n  } else {\n    record_status &lt;- \"high\"\n  } \n  bp_list$treatment$status[i] &lt;- record_status\n}"
  },
  {
    "objectID": "hw3_quarto.html#task-2-function-writing",
    "href": "hw3_quarto.html#task-2-function-writing",
    "title": "Control Flows",
    "section": "Task 2: Function Writing",
    "text": "Task 2: Function Writing\nNow, we are going to create a function that does the following:\n\nAccepts a list of data frames, a summary statistic and list of columns common between the two data frames\nDefault value for the summary statistic is “mean”\nDefault value for columns set (pre_bp,post_bp,diff_bp)\nDynamically iterate through list of data frames and columns\nDynamically assign names to values that will be returned as a list.\nReturns named list of summary statistic for columns in each data frame\n\n\nretrieve_data &lt;- function(list_of_df,summary_stat=\"mean\",columns=list(\"pre_bp\",\"post_bp\",\"diff_bp\")){\n  my_fun &lt;- get(summary_stat)\n  list_of_values &lt;- vector(\"list\",length(list_of_df)*length(columns))\n  value_names &lt;- vector(\"list\",length(list_of_df)*length(columns))\n  for (i in 1:length(list_of_df)){\n    df_of_interest &lt;- list_of_df[[i]]\n    df_name &lt;- names(list_of_df[i])\n    list_position_start &lt;- (i-1)*3\n    for (i in 1:length(columns)){\n      column_avg &lt;- my_fun(df_of_interest[[columns[[i]]]])\n      list_of_values[list_position_start + i] &lt;- column_avg\n      value_names[list_position_start + i] &lt;- paste(df_name,columns[i],summary_stat,sep=\"_\")\n    }\n  }\n  names(list_of_values) &lt;- value_names\n  return(list_of_values)\n}\n\nNow lets use this function with no summary stat as input (mean), “var”, “sd”, “min”, and “max”.\nLets print the max_list to make sure the result is as expected\n\nmean_list &lt;- retrieve_data(bp_list)\nvar_list &lt;- retrieve_data(bp_list,summary_stat=\"var\")\nsd_list &lt;- retrieve_data(bp_list,summary_stat=\"sd\")\nmin_list &lt;- retrieve_data(bp_list,summary_stat=\"min\")\nmax_list &lt;- retrieve_data(bp_list,summary_stat=\"max\")\n\nmax_list\n\n$treatment_pre_bp_max\n[1] 151\n\n$treatment_post_bp_max\n[1] 146\n\n$treatment_diff_bp_max\n[1] 21\n\n$placebo_pre_bp_max\n[1] 152\n\n$placebo_post_bp_max\n[1] 143\n\n$placebo_diff_bp_max\n[1] 33"
  }
]